<div class="txtcont">
													
													
													<p> https://microcai.org/2013/03/28/boost-base64.html<br> <br> </p> 
<p> </p> 
<p><a target="_blank" rel="nofollow" href="https://en.wikipedia.org/wiki/Base64">base64</a> 编码最初是为了电子邮件开发的。因为电子邮件是个文本协议，不能传输二进制数据，甚至中文也无法进行传输。只能传输ascii编码的文本。这样一来就诞生了多种将二进制数据编码到ascii里的编码方案，base64是其中之一。</p> 
<p>base64是一种非常简单的编码，只要进行一次迭代即可完成解码。</p> 
<p>什么？一次迭代？？？</p> 
<p>这就让我们有机会借助 Boost 提供的迭代器非常简洁的写出base64解码器。</p> 
<p>Boost 提供了一个叫 boost::archive::iterators::binary<em>from</em>base64 的迭代器。但是直接使用它并不能完成 base64解码。</p> 
<p>还应该外面再套一层 archive::iterators::transform_width 以 6bit 为单位转换到 8bit。</p> 
<p> typedef archive::iterators::transform_width&lt; archive::iterators::binary_from_base64, 8, 6, char&gt; base64decodeIterator; </p> 
<p>那么这个就应该是用于解码的 base64decodeIterator</p> 
<p>但是，稍等。如果用来解码电子邮件里的东西，会经常出异常，说有不能允许的字符出现在了base64输入里。</p> 
<p>为什么呢？ 因为电子邮件以 78个字符断行了。也就是出现了base64里不允许的 CRLF。</p> 
<p>那么，怎么办？ 解码前先替换删除 CRLF ?</p> 
<p>非也非也，这么做是愚蠢的哦，因为我们要的就是一次迭代的效果。 所以，archive::iterators::binary<em>from</em>base64 使用的是 const char * 这个迭代器，对吧，我们改一下，使用 boost::filter_iterator 这个迭代器。过滤掉非base64编码字符。</p> 
<p>boost::filter_iterator 需要使用一个模板参数，参数是一个过滤用的仿函数。</p> 
<p>于是我们写一个</p> 
<p> struct is_base64_char { bool operator()(char x) { return boost::is_any_of("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ+/=")(x);} }; </p> 
<p>然后使用 boost::filter<em>iteratorbase64</em>char, const char*&gt; 作为 archive::iterators::binaryfrom_base64 的迭代器，就形如</p> 
<p> typedef archive::iterators::transform_width&lt; archive::iterators::binary_from_base64 &gt;, 8, 6, char&gt; base64decodeIterator; </p> 
<p>然后只要使用 base64decodeIterator(base64string) ，然后执行 ++ 不停的迭代，直到遇到 nul 字符即可完成 base64 字符串解码。为了简化这个迭代过程，可以使用</p> 
<p>std::string result(base64Iterator(str.begin()) , base64Iterator(str.end()));</p> 
<p>这样的形式，则 result 的构造函数内部即会执行迭代，将遍历结果存储于 result 字符串内。</p> 
<p>做一个总结，就编写了如下的函数：</p> 
<p> </p> 
<h2>Related Posts</h2> 
<ul> 
 <li>11 Nov 2014 - <a target="_blank" rel="nofollow" href="https://microcai.org/2014/11/11/fuck-ubuntu.html">ubuntu 太反人类了</a></li> 
 <li>16 Oct 2014 - <a target="_blank" rel="nofollow" href="https://microcai.org/2014/10/16/jitters.html">也说 jitter</a></li> 
 <li>11 Oct 2014 - <a target="_blank" rel="nofollow" href="https://microcai.org/2014/10/11/higher-sample-rate-cheaper-device.html"> 更高采样率，更低成本</a></li> 
 <li>17 Aug 2014 - <a target="_blank" rel="nofollow" href="https://microcai.org/2014/08/17/smthyperthreading-nice-and-scheduling.html"> 超线程, 优先级和调度策略</a></li> 
 <li>09 Aug 2014 - <a target="_blank" rel="nofollow" href="https://microcai.org/2014/08/09/two-kernel-patch-for-my-pc.html">使用自己硬件的时候写的两个补丁</a></li> 
</ul> 
<br>
													
												</div>