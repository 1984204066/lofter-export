<div class="txtcont">
													
													
													<p><a rel="nofollow" href="https://longlycode.github.io/post/emacs%E5%AE%8C%E5%85%A8%E8%A1%A5%E5%AE%8C%E8%AE%A1%E5%88%92-%E4%B8%89/" target="_blank">package的引入和管理</a></p> 
<p>Auto-loading 可以向emacs中注册一个函数，只有当调用或者使用这个函数的时候，包含这个函数的文件才会加载。这么用：</p> 
<p>(autoload'some-function"some-file")<br></p> 
<p>当调用some-function 时，加载some-file.el，再执行这个函数。autoload完整参数：(autoload FUNCTION FILE &amp;optional DOCSTRING INTERACTIVE TYPE)，可以看出它除了提供加载文件地址外，还可以编写说明文档，在不加载文件时也能够查看它的用法。autoload这种方法可以写入的到emacs配置文件里面，但明显不好管理，为什么不在函数定义处就指明它是一个autoload形式的函数呢？事实上可以用所谓的”魔术”注释来装饰一个函数的开头，让它autoload。</p> 
<p>;;;###autoload<br>(defun my-function ()<br>&nbsp;&nbsp;;; Source code...<br>&nbsp;&nbsp;)</p> 
<p><br></p> 
<p><strong>;;;###autoload</strong>是一种神奇的注释。当然autoload这种机制不局限于函数，可以用在一切可以定义的东西上面，比如宏、主模式、次模式等等。</p> 
<p>类似c++的虚函数，先在symbol的位置放上autoloader,&nbsp;实际使用是动态载入实际的函数。？？<br></p> 
<p>Eval after load</p> 
<p>当我们加载一个package的时候想配置它，比如绑定一个自定义的函数等等。为了能够让我们的自定义的代码也autoload，使用with-eval-after-load。</p> 
<p>(with-eval-after-load 'helm<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;; Some-Code<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;)</p> 
<p><br></p> 
<p>Use-package是一个第三方的package，使用前需要安装。Use-package可以说是为了解决之前提到的<strong>所有</strong>问题而出现的。Use-package是一个宏，来看看它是怎么使用的：</p> 
<p>(use-package helm :defer t))</p> 
<p>:defer是个关键字，如果为t，则表示helm的里面的凡是被autoload的函数、宏、模式等都成立。</p> 
<p>(use-package helm<br>&nbsp;&nbsp;:defer t<br>&nbsp;&nbsp;:init<br>&nbsp;&nbsp;;; Code to execute before Helm is loaded<br>&nbsp;&nbsp;:config<br>&nbsp;&nbsp;;; Code to execute after Helm is loaded<br>&nbsp;&nbsp;)</p> 
<p>关键字:init和:config，顾名思义，针对package加载之前和package加载之后添加一些自己的配置。在:init中可以加载一些入口设定，比如定义一些按键调用这个package里面的函数。:config关键字后面的代码和with-eval-after-load功用是一样的，都是package实际被加载之后才会执行。use-package还有很多关键字，比如指定某些条件下才会加载package，可以指定某些特定文件才加载这个package，可以进<a rel="nofollow" href="https://github.com/jwiegley/use-package" target="_blank">官方文档</a>自行查看。</p> 
<p><a rel="nofollow" href="https://phenix3443.github.io/notebook/emacs/modes/use-package-manual.html#org2b8768b" target="_blank">use-package manual</a></p> 
<p>:init 关键字设置 package 加载前执行的代码，可用来设置影响 package 加载过程的变量。&nbsp;即使配置的 package 不存在，&nbsp;:init&nbsp;部分的代码也会执行，所以该部分代码应该保证 package 不存在也可以执行成功。</p> 
<p>:config&nbsp;关键字设置 package 加载后执行的代码，主要用来对 package 进行配置。在 package 自动加载（autoload）的情况下，这些代码直到加载时才会执行。</p> 
<p>:ensure t &nbsp;;;表示一定要安装&nbsp;<br></p> 
<p>:demand ;;强制性加载。<br></p> 
<p>use-package渐渐一统以前古老的配置方式，许多知名的emacser用这个包将自己的配置又重新写了一遍。因为它既包含了现有的所有定义方式又提供了许多关键字，让配置一个package简单易行，而且可以将所有的包都变成了延时加载，只有使用的时候再加载，大大加速了emacs的启动速度。懂得以上所有的emacs加载机制后，基本上自己动手配置一个emacs配置不成问题。<br></p> 
<p><br></p> 
<p><a rel="nofollow" href="https://codeday.me/bug/20190520/1139996.html" target="_blank">自定义Emacs时,在加载包之前或之后是否设置相应的变量？</a></p> 
<p>(setq some-variable some-value)<br>(require 'some-package)<br>要么<br>(require 'some-package)<br>(setq some-variable some-value)</p> 
<p>在我看来,除非某些软件包在加载后明确要求init,否则大部分时间都可以工作.对吗？</p> 
<p>如果变量是用户选项,请在加载包之前执行此操作.该软件包包含一个定义选项的defcustom,但如果变量已经有一个值(例如,来自你的setq),defcustom将不会设置该值.</p> 
<p>类似地,如果变量是不是用户选项的全局定义变量,即由包使用defvar定义.与defcustom一样,defvar不会覆盖现有值.</p> 
<p><a rel="nofollow" href="https://phenix3443.github.io/notebook/emacs/modes/use-package-manual.html#org2b8768b" target="_blank">use-package manual</a><br></p> 
<p>:command 关键字会为命令创建自动加载（autoload），他的参数是 symbol 或 symbol 列表。</p> 
<p>:hook&nbsp;关键字允许将函数添加到钩子上，这里只需要钩子的基本名称。因此，以下所有内容都是等同的：</p> 
<p>(use-package ace-jump-mode<br>&nbsp;&nbsp;:hook prog-mode)&nbsp;&nbsp;&nbsp;;然而经过测试这种写法并没有生效<br><br>(use-package ace-jump-mode<br>&nbsp;&nbsp;:hook (prog-mode&nbsp;. ace-jump-mode))<br><br>(use-package ace-jump-mode<br>&nbsp;&nbsp;:commands ace-jump-mode<br>&nbsp;&nbsp;:init<br>&nbsp;&nbsp;(add-hook 'prog-mode-hook&nbsp;#'ace-jump-mode))</p> 
<p>同样，如果命令添加到多个钩子，以下内容也是等同的：</p> 
<p>(use-package ace-jump-mode<br>&nbsp;&nbsp;:hook (prog-mode text-mode))&nbsp;;没有生效<br><br>(use-package ace-jump-mode<br>&nbsp;&nbsp;:hook ((prog-mode text-mode)&nbsp;. ace-jump-mode))<br><br>(use-package ace-jump-mode<br>&nbsp;&nbsp;:hook ((prog-mode&nbsp;. ace-jump-mode)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(text-mode . ace-jump-mode)))<br><br>(use-package ace-jump-mode<br>&nbsp;&nbsp;:commands ace-jump-mode<br>&nbsp;&nbsp;:init<br>&nbsp;&nbsp;(add-hook 'prog-mode-hook&nbsp;#'ace-jump-mode)<br>&nbsp;&nbsp;(add-hook 'text-mode-hook&nbsp;#'ace-jump-mode))</p> 
<p><br></p> 
<p>:bind 关键字用来设置键绑定：</p> 
<p>(use-packageace-jump-mode:bind&nbsp;("C-."&nbsp;. ace-jump-mode))&nbsp;</p> 
<p>这会做两件事情：</p> 
<ul> 
 <li><p>首先,为 ace-jump-mode 命令创建自动加载。</p></li> 
 <li><p>其次，将 C-.&nbsp;绑定到该命令。加载之后，可以使用 M-x describe-personal-keybindings 查看.emacs&nbsp;文件中设置的所有键绑定。</p></li> 
</ul> 
<p>&nbsp;:bind&nbsp;作用基本等同于以下代码：<br><br>(use-package ace-jump-mode<br>&nbsp;&nbsp;:commands ace-jump-mode<br>&nbsp;&nbsp;:init<br>&nbsp;&nbsp;(bind-key "C-."&nbsp;'ace-jump-mode))<br>此外，&nbsp;:bind 的配置可以是 cons 或 cons 的列表：<br></p> 
<p>(use-package color-moccur<br>&nbsp;&nbsp;:commands (isearch-moccur isearch-all)<br>&nbsp;&nbsp;:bind (("M-s O"&nbsp;. moccur)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:map isearch-mode-map<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("M-o"&nbsp;. isearch-moccur)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;("M-O"&nbsp;. isearch-moccur-all))<br>&nbsp;&nbsp;:init<br>&nbsp;&nbsp;(setq isearch-lazy-highlight t)<br>&nbsp;&nbsp;:config<br>&nbsp;&nbsp;(use-package moccur-edit))</p> 
<p><br></p> 
<p>本例中，来自 color-moccur.el 的 isearch-moccur 和 isearch-all 会延迟加载（autoload），并在全局和 isearch-mode-map 中进行了键绑定。当该 package 真正加载时（通过使用其中一个命令），moccur-edit&nbsp;也会加载，以允许编辑 moccur buffer。</p> 
<p><br></p> 
<p>如果 pacakge 的加载需要将一个目录添加到 load-path 中，使用&nbsp;:load-path&nbsp;。参数可以是一个符号、函数、字符串或字符串列表。如果是相对路径，基于 user-emacs-directory 进行扩展。</p> 
<p>(use-package ess-site<br>&nbsp;&nbsp;:load-path "site-lisp/ess/lisp/"<br>&nbsp;&nbsp;:commands R)</p> 
<p>注意，如果使用一个符号或函数来动态生成路径列表，必须通知字节编译器该定义，以保证该值在编译时可用。这通过使用特殊形式（special form）eval-and-compile (而不是 eval-when-compile)实现。进一步说，该值固定为编译期间确定的值，避免在每次启动时再次查找相同的信息：</p> 
<p>(eval-and-compile<br>&nbsp;&nbsp;(defun ess-site-load-path ()<br>&nbsp;&nbsp;&nbsp;&nbsp;(shell-command "find&nbsp;~&nbsp;-path ess/lisp")))<br><br>(use-package ess-site<br>&nbsp;&nbsp;:load-path (lambda&nbsp;()&nbsp;(list&nbsp;(ess-site-load-path)))<br>&nbsp;&nbsp;:commands R)</p> 
<p>在.emacs 中声明的 package 都会自动下载。&nbsp;:ensure&nbsp;关键字会自动安装系统没有的 package。</p> 
<p>(use-packagemagit:ensure t)</p> 
<p>如果希望所有包 package 都这样处理，需要设置</p> 
<p>(setq use-package-always-ensure t)</p> 
<p>可以这样指定&nbsp;安装 package 的别名：</p> 
<p>(use-packagetex-site:ensure auctex)</p> 
<p>:ensure 会安装系统上没有的 package，但不会进行主动更新。如果希望主动更新，可以使用 auto-package-update，如<br>(use-package auto-package-update<br>&nbsp;&nbsp;:config<br>&nbsp;&nbsp;(setq auto-package-update-delete-old-versions t)<br>&nbsp;&nbsp;(setq auto-package-update-hide-results t)<br>&nbsp;&nbsp;(auto-package-update-maybe))</p> 
<p>24.4 或更高版本，use-package&nbsp;可以将一个包 pin 到特定的 archive，允许混合和匹配来自不同 archive 的 package。主要使用场景是从 gnu 和 melpa-stable 选择 package（混合选择）</p> 
<p><br></p> 
<blockquote> 
 <p>(use-package company<br>&nbsp;&nbsp;:ensure t<br>&nbsp;&nbsp;:pin melpa-stable)<br><br>(use-package evil<br>&nbsp;&nbsp;:ensure t)<br>&nbsp;&nbsp;;; no :pin needed, as package.el will choose the version in melpa<br><br>(use-package adaptive-wrap<br>&nbsp;&nbsp;:ensure t<br>&nbsp;&nbsp;;; as this package is available only in the gnu archive, this is<br>&nbsp;&nbsp;;; technically not needed, but it helps to highlight where it<br>&nbsp;&nbsp;;; comes from<br>&nbsp;&nbsp;:pin gnu)<br><br>(use-package org<br>&nbsp;&nbsp;:ensure t<br>&nbsp;&nbsp;;; ignore org-mode from upstream and use a manually installed version<br>&nbsp;&nbsp;:pin manual)<br></p> 
</blockquote> 
<p>通常&nbsp;:bind 绑定的命令是 package 中自动加载的函数。然而，如果命令实际上是键映射（keymap）的话，这就有所不同了，因为键映射不是函数，不能使用 Emacs 的自动加载机制进行自动加载。</p> 
<p>为了处理这种情况，use-package&nbsp;提供了&nbsp;:bind-keymap&nbsp;，它是&nbsp;:bind&nbsp;一个特殊受限的变体。&nbsp;二者之间的唯一区别是：&nbsp;:bind-keymap&nbsp;绑定的命令必须是 package 中定义的键映射，而不是命令函数。这通过生成一段定制代码来处理：这段代码首先加载含有键映射的 package，加载之后再次执行后续的按键，也就说，将&nbsp;:bind-keymap 绑定的按键解释为一个前缀键来处理。</p> 
<p><br></p> 
<blockquote> 
 <p>(use-package projectile<br>&nbsp;&nbsp;:bind-keymap<br>&nbsp;&nbsp;("C-c p"&nbsp;. projectile-command-map))</p> 
</blockquote> 
<p>C-h c C-c p 可以查看到 C-c p 绑定到了 lambda 函数。</p> 
<p>类似&nbsp;:bind&nbsp;,可以使用&nbsp;:mode&nbsp;和&nbsp;:interpreter&nbsp;在变量 auto-mode-alist 和 interpreter-mode-alist 中建立延迟绑定。这些关键字的参数可以是 cons、&nbsp;列表、字符串或正则表达式。</p> 
<blockquote> 
 <p>(use-package ruby-mode<br>&nbsp;&nbsp;:mode "\\.rb\\'"<br>&nbsp;&nbsp;:interpreter "ruby")<br><br>;; The package is "python" but the mode is "python-mode":<br>(use-package python<br>&nbsp;&nbsp;:mode ("\\.py\\'"&nbsp;. python-mode)<br>&nbsp;&nbsp;:interpreter ("python"&nbsp;. python-mode))</p> 
 <p><br></p> 
</blockquote> 
<p>如果没有使用&nbsp;:commands,&nbsp;:bind,&nbsp;:bind*,&nbsp;:bind-keymap,&nbsp;:bind-keymap*,&nbsp;:mode, or :interpreter&nbsp;（这些都意味着&nbsp;:defer&nbsp;;&nbsp;参阅 use-package 中的文档对每个都简单了解一下），也可以使用&nbsp;:defer&nbsp;关键字实现延迟加载：</p> 
<blockquote> 
 <p>(use-package ace-jump-mode<br>&nbsp;&nbsp;:defer t<br>&nbsp;&nbsp;:init<br>&nbsp;&nbsp;(autoload 'ace-jump-mode&nbsp;"ace-jump-mode" nil t)<br>&nbsp;&nbsp;(bind-key "C-."&nbsp;'ace-jump-mode))</p> 
 <p>这等同于：</p> 
 <p>(use-package ace-jump-mode<br>&nbsp;&nbsp;:bind ("C-."&nbsp;. ace-jump-mode))<br></p> 
</blockquote> 
<p>即使使用&nbsp;:bind ，使用&nbsp;:demand&nbsp;也会强制立即加载，不会为绑定键建立任何自动加载。</p> 
<p>有时，只有在另一个 package 加载之后，加载当前 package 才有意义，因为有些变量或函数此前不在作用域内。这可以通过&nbsp;:after&nbsp;关键字来实现，该关键字允许设置相当丰富的加载条件。这里有一个例子：<br></p> 
<blockquote> 
 <p>(use-package hydra<br>&nbsp;&nbsp;:load-path "site-lisp/hydra")<br><br>(use-package ivy<br>&nbsp;&nbsp;:load-path "site-lisp/swiper")<br><br>(use-package ivy-hydra<br>&nbsp;&nbsp;:after (ivy hydra))</p> 
</blockquote> 
<p>这种情况下，所有的 package 都按照它们出现的顺序进行了加载，使用&nbsp;:after&nbsp;关键字不是绝对必要的。但是，通过使用它，上面的代码可以变得与顺序无关，init&nbsp;文件本质上隐含了这种顺序依赖关系。</p> 
<p>使用&nbsp;:defines&nbsp;和&nbsp;:functions&nbsp;关键字只为字节编译器引入虚拟变量和函数声明。</p> 
<blockquote> 
 <p>(use-package texinfo<br>&nbsp;&nbsp;:defines texinfo-section-list<br>&nbsp;&nbsp;:commands texinfo-mode<br>&nbsp;&nbsp;:init<br>&nbsp;&nbsp;(add-to-list 'auto-mode-alist&nbsp;'("\\.texi$"&nbsp;. texinfo-mode)))</p> 
 <p><br></p> 
</blockquote> 
<p>如果需要消除一个缺失函数的警告，可以使用&nbsp;:function :</p> 
<blockquote> 
 <p><br><br>(use-package ruby-mode<br>&nbsp;&nbsp;:mode "\\.rb\\'"<br>&nbsp;&nbsp;:interpreter "ruby"<br>&nbsp;&nbsp;:functions inf-ruby-keys<br>&nbsp;&nbsp;:config<br>&nbsp;&nbsp;(defun my-ruby-mode-hook ()<br>&nbsp;&nbsp;&nbsp;&nbsp;(require 'inf-ruby)<br>&nbsp;&nbsp;&nbsp;&nbsp;(inf-ruby-keys))<br><br>&nbsp;&nbsp;(add-hook 'ruby-mode-hook&nbsp;'my-ruby-mode-hook))</p> 
</blockquote> 
<p>如果安装 diminsh 和 delight，use-package 内置对它们的支持。它的目的是删除或更改 mode line 中的字符串。</p> 
<p>通过&nbsp;:diminish&nbsp;关键字调用 diminish，该关键字需要一个 minor mode symbol 或符号组成的 cons 以及替代字符串；也可以仅是替代符串，这种情况下，通过末尾带有“-mode"的 package 名猜 minor modes symbol。</p> 
<blockquote> 
 <p>(use-package abbrev<br>&nbsp;&nbsp;:diminish abbrev-mode<br>&nbsp;&nbsp;:config<br>&nbsp;&nbsp;(if (file-exists-p abbrev-file-name)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(quietly-read-abbrev-file)))</p> 
</blockquote> 
<p>通过&nbsp;:delight 关键字调用 delight，该关键字需要 minor mode symbol 和替换字符串，或带引号的 mode-line 数据（这种情况下，通过末尾带有“-mode"的 package 名猜 minor modes symbol）。这两种用法，或两种用法组成的 list，都可以作为关键字的参数。如果没有提供参数，默认该模式名字完全隐藏。</p> 
<blockquote> 
 <p>;; Don't show anything for rainbow-mode.<br>(use-package rainbow-mode<br>&nbsp;&nbsp;:delight)<br><br>;; Don't show anything for auto-revert-mode, which doesn't match<br>;; its package name.<br>(use-package autorevert<br>&nbsp;&nbsp;:delight auto-revert-mode)<br><br>;; Remove the mode name for projectile-mode, but show the project name.<br>(use-package projectile<br>&nbsp;&nbsp;:delight '(:eval&nbsp;(concat&nbsp;"&nbsp;"&nbsp;(projectile-project-name))))<br><br>;; Completely hide visual-line-mode and change auto-fill-mode to " AF".<br>(use-package emacs<br>&nbsp;&nbsp;:delight<br>&nbsp;&nbsp;(auto-fill-function " AF")<br>&nbsp;&nbsp;(visual-line-mode))</p> 
</blockquote> 
<p><a rel="nofollow" href="https://www.jianshu.com/p/eba1f0e892e4" target="_blank">一名Clojurian的Emacs配置</a><br></p> 
<p>&nbsp;</p> 
<blockquote> 
 <p>(use-package clojure-mode<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:ensure t<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;:config<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(add-hook 'clojure-mode-hook&nbsp;#'rainbow-delimiters-mode)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(add-hook 'clojure-mode-hook&nbsp;#'subword-mode)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(add-hook 'clojure-mode-hook&nbsp;#'midje-mode)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(add-hook 'clojure-mode-hook&nbsp;#'my-clj-refactor-mode-hook)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(add-hook 'clojure-mode-hook&nbsp;#'enable-paredit-mode))<br></p>&nbsp;&nbsp; 
</blockquote> 
<p>#'&nbsp;是一个读取宏&nbsp;(read-macro)，功能上相当于 symbol-function，也就是取出一个符号在函数名字空间里的值，也就是以那个符号为名字的函数对象。&nbsp;<br></p>
													
												</div>