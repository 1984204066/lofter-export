<div class="txtcont">
													
													
													<p><a rel="nofollow" href="https://mamicode.com/info-detail-2688872.html" target="_blank">https://mamicode.com/info-detail-2688872.html</a><br></p> 
<p><br></p> 
<p>wget <a rel="nofollow" href="https://ftp.gnu.org/gnu/gcc/gcc-9.1.0/gcc-9.1.0.tar.gz" target="_blank">https://ftp.gnu.org/gnu/gcc/gcc-9.1.0/gcc-9.1.0.tar.gz</a></p> 
<p>tar -xzvf gcc-9.1.0.tar.gz</p> 
<p> cd gcc-9.1.0</p> 
<p>./contrib/download_prerequisiles</p> 
<p>mkdir ../build-gcc</p> 
<p>cd&nbsp;../build-gcc/</p> 
<p>../gcc-9.1.0/configure&nbsp;&nbsp;--enable-bootstrap&nbsp;--enable-languages=c,c++&nbsp;--prefix=/tools&nbsp;--enable-gnu-unique-object&nbsp;--enable-linker-build-id&nbsp;--with-gcc-major-version-only&nbsp;--with-linker-hash-style=gnu&nbsp;--enable-plugin&nbsp;--enable-initfini-array&nbsp;--with-isl&nbsp;--enable-libmpx&nbsp;--enable-offload-targets=nvptx-none&nbsp;--without-cuda-driver&nbsp;--enable-gnu-indirect-function&nbsp;--enable-cet&nbsp;--with-tune=generic&nbsp;--with-arch_32=i686&nbsp;--build=x86_64-redhat-linux</p> 
<p>这个不行啊。<br></p> 
<p>../gcc-9.1.0/configure -enable-checking=release&nbsp;-prefix=/tools&nbsp;-enable-languages=c,c++&nbsp;-disable-multilib</p> 
<p><br></p> 
<p><a rel="nofollow" href="https://blog.csdn.net/sonicling/article/details/6706152" target="_blank">https://blog.csdn.net/sonicling/article/details/6706152</a><br></p> 
<p>而GCC的词法分析是手工构造的，实现在libcpp/lex.c文件中，其中最重要的那个函数是_cpp_lex_direct，他反应了GCC词法分析器的核心结构。</p> 
<p>$ cat t2.c <br>&nbsp;#include &lt;stdio.h&gt;&nbsp;<br> int main(int argc, char **argv)&nbsp;&nbsp;<br>&nbsp;{&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; int i ← 0;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; unsigned char *str&nbsp;←&nbsp;"1234中";&nbsp;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; while(str[i])&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("%02x ",str[i]);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; i++;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; printf("\n");&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; if ( 1 ?= 1)&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printf("%s\n", str);&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp; return 0;&nbsp;&nbsp;<br>&nbsp;}&nbsp;<br>&nbsp;$&nbsp;/tools/bin/gcc t2.c <br>&nbsp;$&nbsp;./a.out <br> 31 32 33 34 e4 b8 ad &nbsp;<br> 1234中&nbsp;<br>&nbsp;&nbsp;<br>&nbsp;只限于使用utf8 的&nbsp;←&nbsp;<br>&nbsp;$ diff -u lex.c.old&nbsp; lex.c <br>&nbsp;--- lex.c.old &nbsp;&nbsp; 2019-08-10 13:27:04.354956122 +0800&nbsp;<br>&nbsp;+++ lex.c &nbsp;&nbsp; 2019-08-10 13:57:50.698128173 +0800&nbsp;<br>&nbsp;@@&nbsp;-3099,11 +3099,18&nbsp;@@&nbsp;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '*': IF_NEXT_IS ('=', CPP_MULT_EQ, CPP_MULT); break;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '=': IF_NEXT_IS ('=', CPP_EQ_EQ, CPP_EQ); break;&nbsp;<br>&nbsp;+&nbsp;&nbsp;&nbsp; case 0xE2:&nbsp;<br>&nbsp;+&nbsp;&nbsp;&nbsp; if (*buffer-&gt;cur&nbsp;== 0x86 &amp;&amp; buffer-&gt;cur[1]&nbsp;== 0x90)&nbsp;<br>&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; buffer-&gt;cur+= 2, result-&gt;type = CPP_EQ;&nbsp;<br>&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else <br>&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpp_error (pfile, CPP_DL_WARNING,&nbsp;"not support");&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;+&nbsp;&nbsp;&nbsp; break;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '!': IF_NEXT_IS ('=', CPP_NOT_EQ, CPP_NOT); break;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '^': IF_NEXT_IS ('=', CPP_XOR_EQ, CPP_XOR); break;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '#': IF_NEXT_IS ('#', CPP_PASTE, CPP_HASH); result-&gt;val.token_no = 0; break;&nbsp;<br>&nbsp;&nbsp;&nbsp;<br>&nbsp;-&nbsp;&nbsp;&nbsp; case '?': result-&gt;type = CPP_QUERY; break;&nbsp;<br>&nbsp;+&nbsp;&nbsp;&nbsp;&nbsp;//case '?': result-&gt;type = CPP_QUERY; break;&nbsp;<br>&nbsp;+&nbsp;&nbsp;&nbsp; case '?': IF_NEXT_IS ('=', CPP_EQ_EQ, CPP_QUERY); break;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '~': result-&gt;type = CPP_COMPL; break;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case ',': result-&gt;type = CPP_COMMA; break;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; case '(': result-&gt;type = CPP_OPEN_PAREN; break;&nbsp;<br></p>
													
												</div>