<div class="txtcont">
													
													
													<p> https://blog.163.com/ecy_fu/blog/static/4445126200911291022174/<br> <br> <br> </p> 
<p>&nbsp; POD即"Plain Old Data"， 它表示一种简单的类型，这种类型没有使用指针，可以直接在两个对象之间直接赋值而没有什么隐患。系统中会存在大量的POD类型，比如保存程序运行的各种状 态参数的结构体，比如表示坐标点的简单类，这些POD类型在序列化时是可以直接进行内存存取的，这样不仅节省空间，而且效率也更高。</p> 
<p>&nbsp;&nbsp; &nbsp; &nbsp; &nbsp;Boost Serialization库提供多种方法以直接保存POD类型。在看Boost Serialization官 方文档中，我最早看到Bitwise Serialization这个traits，我以为使用"BOOST_IS_BITWISE_SERIALIZABLE(my_class)"声明一 下，以后遇到形如"ar&amp; my_class"将直接进行内存拷贝，这是最理想的使用方法，可是这样用是通不过编译的，编译时会提示my_class不存在serialize方法。 在网上搜了半天也没有发现有使用Bitwise Serialization比较好的例子。不过天无绝人之路，Boost Serialization提供了别的接口可以方便直接存取POD类型。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第一种方法是使用text_oarchive_impl::save_binary，text_iarchive_impl::load_binary 可以保存一个内存块。因为调用两个函数的时机不同，一个在保存时调用，一个在恢复时调用，因此需要使用一个标志加于判 断，interface_iarchive提供连个标志is_loading和is_saving可以用于判断archive用于保存还是载入。实践证 明，只能使用BOOST_SERIALIZATION_SPLIT_MEMBER宏声明将serialize分离成save和load，否则编译会失败， 因为save_binary属于load_binary属于不同的类方法。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 第二种方法是一种更好的方法。Serialization Wrappers提供Binary Objects可用于包装POD类型，然后通过对内存直接存取来序列化Binary Objects。第一种方法还需要判断archive的用途，这种方法不需要判断，代码将更加简洁。<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 下面给出一个使用的例子程序，代码如下：<br> #include<br> #include<br> #include<br> <br> using namespace std;<br> <br> #include<br> #include<br> <br> #include<br> #include<br> <br> //该类是典型的POD类型<br> class Position<br> {<br> public:<br> &nbsp;&nbsp;&nbsp; double m_lat;<br> &nbsp;&nbsp;&nbsp; double m_lon;<br> &nbsp;&nbsp;&nbsp; double m_height;<br> <br> &nbsp;&nbsp;&nbsp; Position()<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; };<br> <br> &nbsp;&nbsp;&nbsp; Position(double lon, double lat, double hi)<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; m_lon = lon;<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; m_lat = lat;<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; m_height = hi;<br> &nbsp;&nbsp;&nbsp; }<br> };<br> <br> class Test<br> {<br> public:<br> &nbsp;&nbsp;&nbsp; void SetPosition(const Position&amp; pos)<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; position = pos;<br> &nbsp;&nbsp;&nbsp; }<br> <br> &nbsp;&nbsp;&nbsp; Test()<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; };<br> <br> &nbsp;&nbsp;&nbsp; template<br> &nbsp;&nbsp;&nbsp; void save(Archive &amp; ar, const unsigned int version) const<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; //对于POD类型直接序列化<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ar.save_binary(&amp;position, sizeof(Position));<br> &nbsp;&nbsp;&nbsp; }<br> <br> &nbsp;&nbsp;&nbsp; template<br> &nbsp;&nbsp;&nbsp; void load(Archive &amp; ar, const unsigned int version)<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ar.load_binary(&amp;position, sizeof(Position));<br> &nbsp;&nbsp;&nbsp; }<br> <br> &nbsp;&nbsp;&nbsp; //将save和load分开<br> &nbsp;&nbsp;&nbsp; BOOST_SERIALIZATION_SPLIT_MEMBER()<br> <br> public:<br> &nbsp;&nbsp;&nbsp; Position position;<br> };<br> <br> int main()<br> {<br> &nbsp;&nbsp;&nbsp; Test test;<br> <br> &nbsp;&nbsp;&nbsp; Position pos(104.12, 40.23, 1000);<br> <br> &nbsp;&nbsp;&nbsp; test.SetPosition(pos);<br> <br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ofstream ofs("test.dat");<br> <br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; boost::archive::text_oarchive oa(ofs);<br> <br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; oa &lt;&lt; test;<br> &nbsp;&nbsp;&nbsp; }<br> &nbsp;&nbsp;&nbsp;<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ifstream ifs("test.dat");<br> <br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; boost::archive::text_iarchive ia(ifs);<br> <br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; Test test2;<br> <br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ia &gt;&gt; test2;<br> <br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; cout &lt;&lt; test2.position.m_lon &lt;&lt; endl;<br> &nbsp;&nbsp;&nbsp; }<br> <br> };<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 使用第二种方法只需使用下面这段代码替换上面Test类的声明即可。<br> class Test<br> {<br> public:<br> &nbsp;&nbsp;&nbsp; void SetPosition(const Position&amp; pos)<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; position = pos;<br> &nbsp;&nbsp;&nbsp; }<br> <br> &nbsp;&nbsp;&nbsp; Test()<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp; };<br> <br> &nbsp;&nbsp;&nbsp; template<br> &nbsp;&nbsp;&nbsp; void serialize(Archive &amp; ar, const unsigned int version)<br> &nbsp;&nbsp;&nbsp; {<br> &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; //优势非常明显<br> &nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp; ar&amp; boost::serialization::binary_object((void*)&amp;position, sizeof(Position));<br> &nbsp;&nbsp;&nbsp; }<br> <br> public:<br> &nbsp;&nbsp;&nbsp; Position position;<br> };</p> 
<br>
													
												</div>