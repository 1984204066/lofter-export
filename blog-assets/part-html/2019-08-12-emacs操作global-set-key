<div class="txtcont">
													
													
													<p><a rel="nofollow" href="https://www.masteringemacs.org/article/mastering-key-bindings-emacs" target="_blank">Key Bind Commands</a></p> 
<p>There are several ways you can define (or undefine) keys, as the table below shows, but in reality there are dozens of ways you can hack the keymaps.</p> 
<p>(define-key KEYMAP KEY DEF)&nbsp;</p> 
<p>Defines a key against a keyboard map. Use this if you want to change a keymap that isn’t the current buffer map.</p> 
<p>(local-set-key KEY COMMAND)&nbsp;</p> 
<p>Binds a key to the local keymap used by the active buffer, unlike define-key which takes an explicit keymap to bind a key against.</p> 
<p>(global-set-key KEY COMMAND)&nbsp;</p> 
<p>Binds a key to the global keymap, making it available in all buffers (with a caveat – see below.)</p> 
<p>(global-unset-key KEY)&nbsp;</p> 
<p>Removes KEY from the global keymap</p> 
<p>(local-unset-key KEY)&nbsp;</p> 
<p>Removes KEY from the active, local keymap.</p> 
<p><br></p> 
<p><a rel="nofollow" href="https://blog.csdn.net/rodneyzhaonet/article/details/44004549" target="_blank">global-set-key 干了什么</a></p> 
<p>很多人绑定一些比较特殊的键的时候，都搞不清楚在<br><br>(global-set-key ...&nbsp;'my-funtion)<br><br>里写些什么。特别是在 xterm 里的时候就更不知所措了。其实有一个万无一失的办法保证你一定写对。这个办法就是：<br><br>&nbsp;&nbsp;&nbsp; M-x global-set-key RET 交互式的绑定你的键。<br>&nbsp;&nbsp;&nbsp; C-x Esc Esc 调出上一条“复杂命令”。<br><br>好了，你现在就能在 minibuffer 里看到你应该写在&nbsp;.emacs&nbsp;的东西了。<br>如果你还是失败了……<br><br>如果你在第1步的时候发现 Emacs 根本对你的按键没有反应，那么应该怀疑是你的窗口管理器拦截了这个按键。比如，我的 FVWM 设置把 C-f3 设定成了打开一个 FvwmCommand,&nbsp;所以Emacs 接收不到这个按键。如果我要绑定一个函数到 C-f3,&nbsp;我必须让 FVWM 放过 C-f3。<br>绑定新的前缀键<br><br>其实上面的办法只能让你绑定一个已有的前缀。你有可能想绑定一个 save-buffer 到&nbsp;"C-c C-w C-b a"。上面的办法就不灵了。我们必须使用另外的办法：<br><br>(global-set-key (kbd&nbsp;"C-c C-w C-b a")&nbsp;'save-buffer)&nbsp;</p> 
<blockquote> 
 <p>C-c是一个已有的前缀<br></p> 
</blockquote> 
<p>一点解释<br><br>上面的那个&nbsp;"C-c C-w C-b a"&nbsp;是自动把&nbsp;"C-c C-w",&nbsp;"C-c C-w C-b"&nbsp;都定义成了一个 prefix-command.&nbsp;你可以这样看到它们：<br><br>&nbsp;&nbsp;&nbsp; C-h C-b 显示绑定<br>&nbsp;&nbsp;&nbsp; C-x o 切换到显示绑定的窗口<br>&nbsp;&nbsp;&nbsp; C-x C-q 消除这个窗口的只读属性<br>&nbsp;&nbsp;&nbsp; M-x delete-non-matching-lines RET prefix RET 删除所有不含"prefix"&nbsp;字样的行。<br><br>现在你清楚的看到了&nbsp;"C-c C-w",&nbsp;"C-c C-w C-b"&nbsp;都是 prefixcommand 吧？</p> 
<p>上面这个办法只对开头的键已经是 prefix command 的键序列起作用，如果你的第一个键不是一个 prefix，那么就会出错。你可以试试：<br><br>(global-set-key (kbd&nbsp;"C-z C-c C-w b")&nbsp;'find-file)<br><br>出现错误：(error "Key sequence C-z C-c C-w b uses invalidprefix characters")<br><br>所以你必须事先把第一个键设定为 prefix:<br><br>(define-prefix-command 'ctl-z-map)<br>(global-set-key (kbd&nbsp;"C-z")&nbsp;'ctl-z-map)<br><br>然后再用<br><br>(global-set-key (kbd&nbsp;"C-z C-c C-w b")&nbsp;'find-file)<br><br>就行了。"C-z C-c"&nbsp;和&nbsp;"C-z C-c C-w"&nbsp;都会自动被定义为 prefixcommand.</p> 
<p><a rel="nofollow" href="https://blog.csdn.net/rodneyzhaonet/article/details/44004549" target="_blank">绑定中文命令</a><br><br>现在我举一个例子来说明 prefix command 是如何工作的。我们可以把中文的&nbsp;存盘&nbsp;两个字绑定到save-buffer.&nbsp;这样你用中文输入法敲入“存盘”两个字时，就可以把当前 buffer 保存起来。<br><br>(define-prefix-command '存-map)<br>(global-set-key (kbd&nbsp;"存")&nbsp;'存-map)<br>(define-key 存-map&nbsp;(kbd&nbsp;"盘")&nbsp;'save-buffer)<br><br>有趣吧？你可以猜到这里面是怎么回事吧？太简单了是不是？当你输入“存”的时候，看到 minibuffer 是这样：<br><br><img src="https://docs.huihoo.com/homepage/shredderyin/images/bind-cun.png" style="max-width:500px;"><br><br>这是因为我们把“存”这个字绑定到了&nbsp;存-map 这个prefix-command.&nbsp;当读到“存”的时候，Emacs&nbsp;就会等待下一条命令，这个命令是定义在&nbsp;存-map&nbsp;这个 map 里的。它读到“盘”，就会执行 save-buffer 了。<br><br>不过注意，你真的要在文档里输入“存盘”两个字就得先打 C-q 了。刚才我就打了好多次 C-q，真累啊。还是用一些不常用的词组比较好，或者加一个 ctrl 什么的前缀，就像这个，"C-z&nbsp;存盘"。<br><br>(define-prefix-command 'ctl-z-map)<br>(global-set-key (kbd&nbsp;"C-z")&nbsp;'ctl-z-map)<br>(define-key ctl-z-map (kbd&nbsp;"存盘")&nbsp;'save-buffer)</p> 
<p>define-key&nbsp;会自动建立很多 prefix command.&nbsp;不过自己显式用 define-prefix-command 定义前缀命令有一个好处，就是你可以在你的 prefix 里再方便的定义更多的命令，而不用把整个前缀都写一遍。<br><br>(define-prefix-command 'ctl-z-map)<br>(define-prefix-command '存-map)<br>(define-prefix-command '盘-map)<br><br>(global-set-key (kbd&nbsp;"C-z")&nbsp;'ctl-z-map)<br>(define-key ctl-z-map (kbd&nbsp;"存")&nbsp;'存-map)<br>(define-key 存-map&nbsp;(kbd&nbsp;"盘")&nbsp;'盘-map)<br><br>(define-key 盘-map&nbsp;(kbd&nbsp;"！")&nbsp;'save-buffer)<br>(define-key 盘-map&nbsp;(kbd&nbsp;"到")&nbsp;'write-file)<br>(define-key 盘-map&nbsp;(kbd&nbsp;"退出")&nbsp;<br>&nbsp;&nbsp;(lambda ()<br>&nbsp;&nbsp;&nbsp;&nbsp;(interactive)<br>&nbsp;&nbsp;&nbsp;&nbsp;(save-buffer)<br>&nbsp;&nbsp;&nbsp;&nbsp;(kill-emacs)))<br><br>这样，到了“C-z 存盘-”&nbsp;这个时候，我们定义了3个分支：<br><br>&nbsp;&nbsp;&nbsp;&nbsp;“C-z 存盘！”，表示保存这个文件；<br>&nbsp;&nbsp;&nbsp;&nbsp;“C-z 存盘到”，表示保存到另一个文件；<br>&nbsp;&nbsp;&nbsp;&nbsp;“C-z 存盘退出”，这个不用解释了吧。<br><br>自定义 prefix command 的另外一个更大的好处就是：你可以修改最上层对 prefix command 的绑定，从而修改许多键的绑定。比如，我们可以把&nbsp;“存盘”&nbsp;轻而易举的改成&nbsp;“保存”：<br><br>(define-key ctl-z-map (kbd&nbsp;"保存")&nbsp;'盘-map)<br><br>这样一来，&nbsp;“C-z 保存！”&nbsp;，“C-z&nbsp;保存到”&nbsp;，&nbsp;“C-z&nbsp;保存退出”就分别有了&nbsp;“C-z&nbsp;存盘！”&nbsp;，&nbsp;“C-z&nbsp;存盘到”&nbsp;和&nbsp;“C-z&nbsp;存盘退出”&nbsp;的含义了。</p> 
<p><br></p> 
<p><a rel="nofollow" href="https://www.masteringemacs.org/article/mastering-key-bindings-emacs" target="_blank">Custom Prefixes</a></p> 
<p>Purpose</p> 
<p>Creating a prefix is easy nowadays as you don’t have to explicitly create your own prefix keymaps, provided you use local-set-key or global-set-key. Use custom prefixes to group or categorize your commands.</p> 
<p>Definition(global-set-key (kbd&nbsp;"subkey_1&nbsp;... endkey_1")&nbsp;'my-command-1)(global-set-key (kbd&nbsp;"subkey_1&nbsp;... endkey_2")&nbsp;'my-command-2)Example </p> 
<p>Global keys that will insert either the time of the day, or the current date. Type C-c i d to insert the date; and C-c i t to insert the time. Type C-c i C-h to list all bound keys under the C-c i prefix.</p> 
<p>(defun mp-insert-date ()&nbsp;&nbsp;(interactive)&nbsp;&nbsp;(insert&nbsp;(format-time-string&nbsp;"%x")))(defun mp-insert-time ()&nbsp;&nbsp;(interactive)&nbsp;&nbsp;(insert&nbsp;(format-time-string&nbsp;"%X")))(global-set-key&nbsp;(kbd&nbsp;"C-c i d")&nbsp;'mp-insert-date)(global-set-key (kbd&nbsp;"C-c i t")&nbsp;'mp-insert-time)&nbsp;</p> 
<p><br></p> 
<p><br></p> 
<p>&nbsp;<br></p> 
<p>Emacs中`global-set-key`和`define-key global-map`有什么区别</p> 
<p>global-set-key在subr.el中定义为：(define-key (current-global-map) key command))</p> 
<p>global-set-key是基于define-key的交互式功能</p> 
<p><a rel="nofollow" href="https://www.jianshu.com/p/07996a1af7b0" target="_blank">https://www.jianshu.com/p/07996a1af7b0</a><br></p> 
<p>按键绑定的可见范围分类</p> 
<p>全局绑定&nbsp;&gt;&nbsp;主模式（major-mode）绑定&nbsp;&gt;&nbsp;副模式（minor-mode）绑定&nbsp;&gt;&nbsp;局部绑定（在某个缓冲区中通过执行"M-x"所做的绑定）</p> 
<p>在更小可见范围中定义的按键绑定将会覆盖掉在更大可见范围内已经定义的相同按键的绑定。</p> 
<p>查看某个按键（序列）和哪些函数进行了绑定&nbsp;</p> 
<p>C-h c [按键序列]</p> 
<p>查看某个函数和哪些按键（序列）进行了绑定&nbsp;</p> 
<p>C-h w [函数名]&nbsp;&lt;RET&gt;</p> 
<p>使用global-set-key和kbd给函数绑定全局按键&nbsp;</p> 
<p>常用用法如下：</p> 
<p>(global-set-key&nbsp;(kbd"C-z")&nbsp;'shell)&nbsp;;;&nbsp;将shell函数绑定到按键"C-z"上(global-set-key&nbsp;(kbd"C-c y")&nbsp;'clipboard-yank)&nbsp;;;&nbsp;将clipboard-yank函数绑定到按键"C-c y上"(global-set-key (kbd"C-M-q")&nbsp;'query-replace)(global-set-key&nbsp;(kbd"&lt;f5&gt;")&nbsp;'flyspell-mode)(global-set-key&nbsp;(kbd"C-&lt;f5&gt;")&nbsp;'linum-mode)(global-set-key&nbsp;(kbd"C-&lt;right&gt;")&nbsp;'forward-sentence)使用add-hook给指定的主模式绑定按键&nbsp;</p> 
<p>使用add-hook可以对指定的主模式进行按键绑定，而不影响其他模式。大部分的主模式都定义了自己的至少一个hook，用法示例：</p> 
<p>;;&nbsp;仅在org-mode模式改变"C-z"的按键绑定，将其绑定为打开shell命令行的"shell"函数，注意这里要使用local-set-key(add-hook&nbsp;'org-mode-hook&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(lambda&nbsp;()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(local-set-key&nbsp;(kbd"C-z")&nbsp;'shell)))&nbsp;</p> 
<p>注：1.&nbsp;给主模式绑定快捷键后，要重启主模式才能生效（kill掉对应的buffer然后重新打开）2.&nbsp;查看当前emacs中的所有已定义的hook：M-x apropos-variable &lt;RET&gt;&nbsp;-hook&nbsp;&lt;RET&gt;</p> 
<p>使用define-key给指定的模式绑定按键&nbsp;</p> 
<p>使用define-key函数也可以给指定的模式绑定快捷键，前提是这个模式定义了按键map，所以第一件事就是要找到这个模式所定义的按键map。</p> 
<p>以org-mode为例，怎么知道这个模式所定义的按键map是什么呢？非常简单，C-h f &lt;RET&gt; org-mode &lt;RET&gt;查看org-mode的帮助文档，就会出现org-mode代码所在的el文件，进入这个文件，搜索：-map，就会找到org-mode-map这个变量。</p> 
<p>然后使用define-key来为org-mode定义一个简单的按键绑定，如下：</p> 
<p>(defun my-org-func ()&nbsp;&nbsp;(interactive)&nbsp;&nbsp;(message"hello, org!"))(define-key org-mode-map (kbd"C-c d")&nbsp;'my-org-func)&nbsp;</p> 
<p>加载上述代码后，在org-mode中按C-c d快捷键，就会执行my-org-func函数，显示出来一个字符串：hello, org!</p> 
<p>&nbsp;<a rel="nofollow" href="https://jixiuf.github.io/blog/00005-emacs-keybind.html/" target="_blank">https://jixiuf.github.io/blog/00005-emacs-keybind.html/</a><br></p> 
<p>M-x global-set-key RET 交互式的绑定你的键</p> 
<p>比如&nbsp;我想绑定 Alt-Return 到 forward-char 这个命令<br>M-x:global-set-key RET 然后&nbsp;按下 Alt-Return 按键&nbsp;，然后输入forward-char&nbsp;然后回来<br>再然后&nbsp;按下 C-x Esc Esc 就会在minibuffer&nbsp;里显示出<br></p> 
<p>(global-set-key [27 13]&nbsp;(quote forward-char))&nbsp;</p> 
<p><br></p> 
<p><a rel="nofollow" href="https://www.emacswiki.org/emacs/PrefixKey" target="_blank">Duplicating prefix keys</a></p> 
<p>Since I’m a Windows user and use CUA, I copy C-x functionality onto the &lt;C-lwindow&gt; key. This way I can reach C-x prefixed functions consistantly even when I’ve&nbsp; got text selected. The same technique could copy them to just about any other&nbsp; available key.</p> 
<p>&nbsp;&nbsp;(global-set-key (kbd&nbsp;"&lt;C-lwindow&gt;")&nbsp;(lookup-key global-map (kbd&nbsp;"C-x")))&nbsp;</p> 
<p><strong>NOTE</strong> This only copies the PREFIX KEY not any followup key. Meaning the C-x C-x function can now be reached using &lt;C-lwindow&gt; C-x&nbsp; but unless C-x &lt;C-lwindow&gt; is mapped to something,&nbsp;&lt;C-lwindow&gt;&nbsp;&lt;C-lwindow&gt; won’t be either.</p>
													
												</div>