<div class="txtcont">
													
													
													<p> </p> 
<p><strong> https://blog.csdn.net/gddsky/article/details/5021388<br></strong></p> 
<p><strong> <br></strong></p> 
<p><strong> 目的</strong></p> 
<p> 在结构体上面可以定义std::string这样的数据，并方便打包与解包</p> 
<p>&nbsp;</p> 
<p><strong> 核心</strong></p> 
<p> 1.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boost库提供了非常方便的对像序列化库boost::archive、boost::serialization，通过这两个库我们可以很方便的打包std里面像std::string、std::list这些类型的数据。</p> 
<p> 2.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 打包数据我们当然要使用二进制的方式所以使用boost::archive::binary_iarchive、boost::archive::binary_oarchive。</p> 
<p> 3.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 在真正编写代码的过程中发现这两个类为了序列化出来的数据有版本的区分还在输出的数据最前面加上一些版本信息，为了去除它们，最终我的解决方案是重写这两个类，将输出版本信息这块代码给关闭掉。</p> 
<p> 4.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; boost的序列化方法是在结构体上面做一个函数（全局的不提了），如下：</p> 
<p> struct data</p> 
<p> {</p> 
<p> std::string v;</p> 
<p> int v2;</p> 
<p> template&lt;&lt;span style="COLOR: blue"&gt;class Archive&gt;</p> 
<p> void serialize(Archive &amp; ar, const unsigned int version)</p> 
<p> {</p> 
<p> &nbsp;&nbsp;&nbsp; ar &amp; v;</p> 
<p> &nbsp;&nbsp;&nbsp; ar &amp; v2;</p> 
<p> }</p> 
<p> };</p> 
<p> 程序员总有一个通病“懒”，看到这样的代码就在想能不能将serialize函数给去掉或者让计算机自动生成，分析了很多，最后的解决方法是使用宏来处理在代码里可以看到MSG1、MSG2…MSG9这样的宏，它们就是为了完成这个想法而做的东西，很丑！！！（哪位有好的解决方法请一定要告知我，非常感谢）</p> 
<p> 5.&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 为了做到使用更加方便，简单做了MsgPack与MsgUnpack类来做打包与解包工作。</p> 
<p>&nbsp;</p> 
<p><strong> 代码</strong></p> 
<p>&nbsp;</p> 
<p> </p> 
<p> </p> 
<p><strong><b>[cpp]</b> <a title="view plain" target="_blank" rel="nofollow" href="https://blog.csdn.net/gddsky/article/details/5021388#">view plain</a><a title="copy" target="_blank" rel="nofollow" href="https://blog.csdn.net/gddsky/article/details/5021388#">copy</a></strong></p> 
<ol start="1"> 
 <li><strong>//msg_binary_iarchive.h&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;once&nbsp;&nbsp;</strong></li> 
 <li><strong>//&nbsp;这文件内容是直接复制的boost的binary_iarchive.hpp的内容做了点儿修改&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(push)&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(disable&nbsp;:&nbsp;4267)&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(disable&nbsp;:&nbsp;4996)&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(pop)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>namespace&nbsp;boost&nbsp;{&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>namespace&nbsp;archive&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>class&nbsp;naked_binary_iarchive&nbsp;:&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;binary_iarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::archive::naked_binary_iarchive,&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::istream::char_type,&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::istream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;</strong></li> 
 <li><strong>{&nbsp;&nbsp;</strong></li> 
 <li><strong>public:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;naked_binary_iarchive(std::istream&nbsp;&amp;&nbsp;is,&nbsp;unsigned&nbsp;int&nbsp;flags&nbsp;=&nbsp;0)&nbsp;:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary_iarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;naked_binary_iarchive,&nbsp;std::istream::char_type,&nbsp;std::istream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;(is,&nbsp;flags)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;naked_binary_iarchive(std::streambuf&nbsp;&amp;&nbsp;bsb,&nbsp;unsigned&nbsp;int&nbsp;flags&nbsp;=&nbsp;0)&nbsp;:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary_iarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;naked_binary_iarchive,&nbsp;std::istream::char_type,&nbsp;std::istream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;(bsb,&nbsp;flags)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>}&nbsp;//&nbsp;namespace&nbsp;archive&nbsp;&nbsp;</strong></li> 
 <li><strong>}&nbsp;//&nbsp;namespace&nbsp;boost&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>namespace&nbsp;boost&nbsp;{&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>namespace&nbsp;archive&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>class&nbsp;msg_binary_iarchive&nbsp;:&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;binary_iarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::archive::msg_binary_iarchive,&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::istream::char_type,&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::istream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&gt;,&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;detail::shared_ptr_helper&nbsp;&nbsp;</strong></li> 
 <li><strong>{&nbsp;&nbsp;</strong></li> 
 <li><strong>public:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;binary_iarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boost::archive::msg_binary_iarchive,&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::istream::char_type,&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;std::istream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;base;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_iarchive(std::istream&nbsp;&amp;&nbsp;is,&nbsp;unsigned&nbsp;int&nbsp;flags&nbsp;=&nbsp;0)&nbsp;:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary_iarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_iarchive,&nbsp;std::istream::char_type,&nbsp;std::istream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;(is,&nbsp;flags)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_iarchive(std::streambuf&nbsp;&amp;&nbsp;bsb,&nbsp;unsigned&nbsp;int&nbsp;flags&nbsp;=&nbsp;0)&nbsp;:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary_iarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_iarchive,&nbsp;std::istream::char_type,&nbsp;std::istream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;(bsb,&nbsp;flags)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;T&gt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;load_override(T&nbsp;&amp;&nbsp;t,&nbsp;BOOST_PFTO&nbsp;int)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_MPL_ASSERT_NOT((&nbsp;boost::is_pointer&nbsp;));&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base::load_override(t,&nbsp;0);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这些信息都不要了&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;load_override(boost::archive::class_id_optional_type&nbsp;&amp;,&nbsp;int){}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;load_override(boost::archive::tracking_type&nbsp;&amp;&nbsp;t,&nbsp;int){t.t&nbsp;=&nbsp;false;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;load_override(boost::archive::version_type&nbsp;&amp;&nbsp;t,&nbsp;int){t.t&nbsp;=&nbsp;0;}&nbsp;&nbsp;</strong></li> 
 <li><strong>};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>}&nbsp;//&nbsp;namespace&nbsp;archive&nbsp;&nbsp;</strong></li> 
 <li><strong>}&nbsp;//&nbsp;namespace&nbsp;boost&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>//&nbsp;required&nbsp;by&nbsp;export&nbsp;&nbsp;</strong></li> 
 <li><strong>BOOST_SERIALIZATION_REGISTER_ARCHIVE(boost::archive::msg_binary_iarchive)&nbsp;&nbsp;</strong></li> 
 <li><strong>BOOST_SERIALIZATION_USE_ARRAY_OPTIMIZATION(boost::archive::msg_binary_iarchive)&nbsp;&nbsp;</strong></li> 
</ol> 
<p>&nbsp;</p> 
<p> </p> 
<p> </p> 
<p><strong><b>[cpp]</b> <a title="view plain" target="_blank" rel="nofollow" href="https://blog.csdn.net/gddsky/article/details/5021388#">view plain</a><a title="copy" target="_blank" rel="nofollow" href="https://blog.csdn.net/gddsky/article/details/5021388#">copy</a></strong></p> 
<ol start="1"> 
 <li><strong>//msg_binary_oarchive.h&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;once&nbsp;&nbsp;</strong></li> 
 <li><strong>//&nbsp;这文件内容是直接复制的boost的binary_oarchive.hpp的内容做了点儿修改&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(push)&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(disable&nbsp;:&nbsp;4267)&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(disable&nbsp;:&nbsp;4996)&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;warning(pop)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>namespace&nbsp;boost&nbsp;{&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>namespace&nbsp;archive&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>class&nbsp;msg_binary_oarchive&nbsp;:&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;binary_oarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_oarchive,&nbsp;std::ostream::char_type,&nbsp;std::ostream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;&nbsp;</strong></li> 
 <li><strong>{&nbsp;&nbsp;</strong></li> 
 <li><strong>public:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;typedef&nbsp;binary_oarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_oarchive,&nbsp;std::ostream::char_type,&nbsp;std::ostream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&gt;&nbsp;base;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_oarchive(std::ostream&nbsp;&amp;&nbsp;os,&nbsp;unsigned&nbsp;int&nbsp;flags&nbsp;=&nbsp;0)&nbsp;:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary_oarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_oarchive,&nbsp;std::ostream::char_type,&nbsp;std::ostream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;(os,&nbsp;flags)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_oarchive(std::streambuf&nbsp;&amp;&nbsp;bsb,&nbsp;unsigned&nbsp;int&nbsp;flags&nbsp;=&nbsp;0)&nbsp;:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;binary_oarchive_impl&lt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;msg_binary_oarchive,&nbsp;std::ostream::char_type,&nbsp;std::ostream::traits_type&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&gt;(bsb,&nbsp;flags)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;T&gt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;save_override(T&nbsp;&amp;&nbsp;t,&nbsp;BOOST_PFTO&nbsp;int)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BOOST_MPL_ASSERT_NOT((&nbsp;boost::is_pointer&nbsp;));&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;base::save_override(t,&nbsp;0);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;这些信息都不要了&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;save_override(const&nbsp;boost::archive::class_id_optional_type&nbsp;&amp;,&nbsp;int){}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;save_override(const&nbsp;boost::archive::tracking_type&nbsp;&amp;,&nbsp;int){}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;save_override(const&nbsp;boost::archive::version_type&nbsp;&amp;,&nbsp;int){}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>typedef&nbsp;msg_binary_oarchive&nbsp;naked_binary_oarchive;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>}&nbsp;//&nbsp;namespace&nbsp;archive&nbsp;&nbsp;</strong></li> 
 <li><strong>}&nbsp;//&nbsp;namespace&nbsp;boost&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>//&nbsp;required&nbsp;by&nbsp;export&nbsp;&nbsp;</strong></li> 
 <li><strong>BOOST_SERIALIZATION_REGISTER_ARCHIVE(boost::archive::msg_binary_oarchive)&nbsp;&nbsp;</strong></li> 
 <li><strong>BOOST_SERIALIZATION_USE_ARRAY_OPTIMIZATION(boost::archive::msg_binary_oarchive)&nbsp;&nbsp;</strong></li> 
</ol> 
<p>&nbsp;</p> 
<p> </p> 
<p> </p> 
<p><strong><b>[cpp]</b> <a title="view plain" target="_blank" rel="nofollow" href="https://blog.csdn.net/gddsky/article/details/5021388#">view plain</a><a title="copy" target="_blank" rel="nofollow" href="https://blog.csdn.net/gddsky/article/details/5021388#">copy</a></strong></p> 
<ol start="1"> 
 <li><strong>//MsgBinaryArchive.h&nbsp;&nbsp;</strong></li> 
 <li><strong>#pragma&nbsp;once&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;"boost/serialization/string.hpp"&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;"boost/serialization/list.hpp"&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;"msg_binary_iarchive.h"&nbsp;&nbsp;</strong></li> 
 <li><strong>#include&nbsp;"msg_binary_oarchive.h"&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG1(mn,t1,n1)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;vn1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;vn1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG2(mn,t1,n1,t2,n2)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG3(mn,t1,n1,t2,n2,t3,n3)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t3&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG4(mn,t1,n1,t2,n2,t3,n3,t4,n4)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t3&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t4&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG5(mn,t1,n1,t2,n2,t3,n3,t4,n4,t5,n5)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t3&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t4&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t5&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG6(mn,t1,n1,t2,n2,t3,n3,t4,n4,t5,n5,t6,n6)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t3&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t4&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t5&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t6&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG7(mn,t1,n1,t2,n2,t3,n3,t4,n4,t5,n5,t6,n6,t7,n7)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t3&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t4&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t5&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t6&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t7&nbsp;n7;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n7;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG8(mn,t1,n1,t2,n2,t3,n3,t4,n4,t5,n5,t6,n6,t7,n7,t8,n8)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t3&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t4&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t5&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t6&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t7&nbsp;n7;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t8&nbsp;n8;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n7;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n8;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>#define&nbsp;MSG9(mn,t1,n1,t2,n2,t3,n3,t4,n4,t5,n5,t6,n6,t7,n7,t8,n8,t9,n9)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;mn/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t3&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t4&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t5&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t6&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t7&nbsp;n7;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t8&nbsp;n8;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t9&nbsp;n9;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;template&lt;&lt;/span&gt;class&nbsp;Archive&gt;&nbsp;void&nbsp;serialize(Archive&nbsp;&amp;&nbsp;ar,&nbsp;const&nbsp;unsigned&nbsp;int&nbsp;version)/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n1;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n2;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n3;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n4;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n5;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n6;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n7;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n8;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ar&nbsp;&amp;&nbsp;n9;/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}/&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>class&nbsp;MsgPack&nbsp;&nbsp;</strong></li> 
 <li><strong>{&nbsp;&nbsp;</strong></li> 
 <li><strong>public:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;MsgPack():&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_oa(_os,&nbsp;boost::archive::no_header)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;template&nbsp;&lt;&lt;/span&gt;class&nbsp;T&gt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;MsgPack&amp;&nbsp;operator&nbsp;&amp;&nbsp;(const&nbsp;T&nbsp;&amp;&nbsp;v)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;reset();&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_oa&nbsp;&amp;&nbsp;v;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;*this;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;template&nbsp;&lt;&lt;/span&gt;class&nbsp;T&gt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;MsgPack&amp;&nbsp;operator&nbsp;&lt;&lt;&nbsp;(const&nbsp;T&nbsp;&amp;&nbsp;v)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_oa&nbsp;&amp;&nbsp;v;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;*this;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;reset()&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_os.freeze(false);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_os.seekp(0);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_os.seekg(0);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;char*&nbsp;buffer()&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_os.str();&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;size_t&nbsp;size()&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_os.pcount();&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>private:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;std::strstream&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_os;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;boost::archive::msg_binary_oarchive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_oa;&nbsp;&nbsp;</strong></li> 
 <li><strong>};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>class&nbsp;MsgUnpack&nbsp;&nbsp;</strong></li> 
 <li><strong>{&nbsp;&nbsp;</strong></li> 
 <li><strong>public:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;MsgUnpack():&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ia(_is,&nbsp;boost::archive::no_header)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;void&nbsp;reset(const&nbsp;char*&nbsp;buf,&nbsp;size_t&nbsp;size)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_is.pcount())&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_is.seekp(0);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_is.seekg(0);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_is.write(buf,&nbsp;(std::streamsize)size);&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;template&nbsp;&lt;&lt;/span&gt;class&nbsp;T&gt;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;MsgUnpack&amp;&nbsp;operator&nbsp;&gt;&gt;&nbsp;(T&nbsp;&amp;&nbsp;v)&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;{&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ia&nbsp;&amp;&nbsp;v;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;*this;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>private:&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;std::strstream&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_is;&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;&nbsp;&nbsp;boost::archive::msg_binary_iarchive&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_ia;&nbsp;&nbsp;</strong></li> 
 <li><strong>};&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;&nbsp;</strong></li> 
 <li><strong>&nbsp;<br></strong></li> 
</ol>
													
												</div>